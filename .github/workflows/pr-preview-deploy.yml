# PR Preview Deploy (Stage 2 - Trusted Context)
# This workflow is triggered by workflow_run after Stage 1 completes
# It has FULL access to secrets and runs from the base branch (trusted)
name: PR Preview Deploy

on:
  workflow_run:
    workflows: ["PR Preview Build"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  deployments: write
  actions: read  # Needed to download artifacts

# Prevent concurrent deployments - cancel old runs when new commits pushed
concurrency:
  group: pr-preview-deployment-${{ github.event.workflow_run.pull_requests[0].number }}
  cancel-in-progress: true

jobs:
  deploy-preview:
    # Only run if Stage 1 succeeded and there's a PR associated
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.pull_requests[0].number != null
    runs-on: ubuntu-latest

    steps:
      - name: Download PR context artifact
        uses: actions/download-artifact@v4
        with:
          name: pr-context-${{ github.event.workflow_run.pull_requests[0].number }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Read and validate PR metadata
        id: pr
        run: |
          echo "📦 Reading PR metadata..."
          cat pr-context.json | jq .

          # Extract and validate PR number (must be positive integer)
          PR_NUMBER=$(jq -r .number pr-context.json)
          if ! [[ "$PR_NUMBER" =~ ^[0-9]+$ ]] || [ "$PR_NUMBER" -lt 1 ] || [ "$PR_NUMBER" -gt 99999 ]; then
            echo "❌ Invalid PR number: $PR_NUMBER"
            exit 1
          fi

          # Extract and validate SHA (must be 40-character hex)
          PR_SHA=$(jq -r .sha pr-context.json)
          if ! [[ "$PR_SHA" =~ ^[a-f0-9]{40}$ ]]; then
            echo "❌ Invalid SHA format: $PR_SHA"
            exit 1
          fi

          # Extract title (truncate to 100 chars, sanitize)
          PR_TITLE=$(jq -r .title pr-context.json | head -c 100 | tr -d '\n\r')

          # Extract is_fork boolean
          IS_FORK=$(jq -r .is_fork pr-context.json)
          if [ "$IS_FORK" != "true" ] && [ "$IS_FORK" != "false" ]; then
            echo "❌ Invalid is_fork value: $IS_FORK"
            exit 1
          fi

          # Set validated outputs
          echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "sha=$PR_SHA" >> $GITHUB_OUTPUT
          echo "title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "is_fork=$IS_FORK" >> $GITHUB_OUTPUT

          echo "✅ Validated PR #$PR_NUMBER from $(jq -r .repo pr-context.json)"

      - name: Checkout PR code from git
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr.outputs.sha }}
          submodules: false  # We'll handle submodules separately

      - name: Use trusted Gemfile for fork PRs (security)
        if: steps.pr.outputs.is_fork == 'true'
        id: gemfile-check
        run: |
          echo "🔒 Fork PR detected - using trusted Gemfile from main branch"

          # Check if Gemfile was modified in this PR
          git fetch origin main
          if ! git diff --quiet origin/main HEAD -- Gemfile Gemfile.lock; then
            echo "gemfile_modified=true" >> $GITHUB_OUTPUT
            echo "⚠️  Gemfile changes detected in fork PR"
          else
            echo "gemfile_modified=false" >> $GITHUB_OUTPUT
          fi

          # Checkout trusted Gemfile and Gemfile.lock from main branch
          git show origin/main:Gemfile > Gemfile.trusted
          git show origin/main:Gemfile.lock > Gemfile.lock.trusted

          # Replace PR's Gemfile with trusted version
          mv Gemfile.trusted Gemfile
          mv Gemfile.lock.trusted Gemfile.lock

          echo "✅ Using trusted dependencies for security"

      - name: Initialize private theme submodule with SSH
        run: |
          echo "🔐 Checking out private theme submodule..."
          # Setup SSH agent with theme deploy key
          eval $(ssh-agent -s)
          echo "${{ secrets.JEKYLL_THEME_KEY }}" | ssh-add -
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

          # Initialize and update theme submodule
          git submodule sync --recursive
          git submodule update --init --recursive

          echo "✅ Private theme checked out successfully"

      - name: Setup Ruby and dependencies
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          cache-version: 0

      - name: Generate PR directory name
        id: pr-directory
        uses: actions/github-script@v7
        with:
          script: |
            const generatePrDirectoryName = require('./.github/scripts/generate-pr-directory-name.js');
            const prNumber = ${{ steps.pr.outputs.number }};
            const prTitle = `${{ steps.pr.outputs.title }}`;

            // Main directory uses just PR number for simplicity
            const directoryName = `pr-${prNumber}`;
            // Slugified version for user-friendly redirect
            const slugifiedName = generatePrDirectoryName(prNumber, prTitle);

            console.log(`Main directory: ${directoryName}`);
            console.log(`Slugified redirect: ${slugifiedName}`);

            // Set outputs
            core.setOutput('directory_name', directoryName);
            core.setOutput('slugified_name', slugifiedName);
            core.setOutput('baseurl_path', `/${directoryName}`);

            return directoryName;

      - name: Build Jekyll site with private theme
        run: |
          export PATH=$PATH:~/.local/share/gem/ruby/3.1.0/bin
          echo "🔨 Building Jekyll site..."
          bundle exec jekyll build --baseurl "${{ steps.pr-directory.outputs.baseurl_path }}"
          echo "✅ Site built successfully"
        env:
          JEKYLL_ENV: production

      - name: Save built site for deployment
        run: |
          # Save to temp location
          cp -r _site /tmp/pr-site-${{ steps.pr-directory.outputs.directory_name }}
          cp -r .github /tmp/pr-github-${{ steps.pr-directory.outputs.directory_name }}

      - name: Clone preview repository and deploy
        run: |
          echo "🚀 Deploying to preview.wafer.space..."

          # Setup SSH for preview repo
          eval $(ssh-agent -s)
          echo "${{ secrets.PREVIEW_KEY }}" | ssh-add -
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

          # Clone preview repository
          git clone git@github.com:wafer-space/preview.wafer.space.git preview-repo
          cd preview-repo

          # Configure git
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

          # Create PR directory and copy built site
          mkdir -p ${{ steps.pr-directory.outputs.directory_name }}
          cp -r /tmp/pr-site-${{ steps.pr-directory.outputs.directory_name }}/* ${{ steps.pr-directory.outputs.directory_name }}/

          # Create redirect page for slugified URL if different
          if [ "${{ steps.pr-directory.outputs.slugified_name }}" != "${{ steps.pr-directory.outputs.directory_name }}" ]; then
            mkdir -p ${{ steps.pr-directory.outputs.slugified_name }}
            cp /tmp/pr-github-${{ steps.pr-directory.outputs.directory_name }}/templates/redirect-template.html ${{ steps.pr-directory.outputs.slugified_name }}/index.html
            sed -i "s|{{TARGET_URL}}|/${{ steps.pr-directory.outputs.directory_name }}|g" ${{ steps.pr-directory.outputs.slugified_name }}/index.html
            echo "Created redirect from ${{ steps.pr-directory.outputs.slugified_name }} to ${{ steps.pr-directory.outputs.directory_name }}"
          fi

          # Ensure CNAME file exists
          if [ ! -f CNAME ]; then
            echo "preview.wafer.space" > CNAME
          fi

          # Generate preview index page
          if [ -f "/tmp/pr-github-${{ steps.pr-directory.outputs.directory_name }}/scripts/generate-preview-index.sh" ]; then
            cp "/tmp/pr-github-${{ steps.pr-directory.outputs.directory_name }}/scripts/generate-preview-index.sh" ./
            mkdir -p .github/templates
            cp "/tmp/pr-github-${{ steps.pr-directory.outputs.directory_name }}/templates/preview-index.html" .github/templates/
            chmod +x generate-preview-index.sh
            ./generate-preview-index.sh
          fi

          # Commit and push
          git add .
          if git diff --staged --quiet; then
            echo "ℹ️  No changes to commit"
            exit 0
          fi

          git commit -m "Deploy preview for PR #${{ steps.pr.outputs.number }} - ${{ steps.pr.outputs.sha }}"

          # SSH agent is still active from earlier setup
          git push origin main

          echo "✅ Deployment complete"

      - name: Wait for Pages deployment
        id: verify-deployment
        run: |
          PREVIEW_URL="https://preview.wafer.space/pr-${{ steps.pr.outputs.number }}/"
          EXPECTED_COMMIT="${{ steps.pr.outputs.sha }}"

          echo "⏳ Waiting for GitHub Pages deployment..."
          echo "Preview URL: $PREVIEW_URL"
          echo "Expected commit: $EXPECTED_COMMIT"

          # Wait for basic HTTP response (3 minutes max)
          for i in {1..18}; do
            sleep 10
            echo "Attempt $i/18: Checking HTTP response..."

            if curl -s --fail --head "$PREVIEW_URL" > /dev/null; then
              echo "✅ Site is responding"
              break
            fi

            if [ $i -eq 18 ]; then
              echo "deployment_status=failed" >> $GITHUB_OUTPUT
              echo "error_message=No HTTP response after 3 minutes" >> $GITHUB_OUTPUT
              exit 1
            fi
          done

          # Verify content is correct (2 minutes max)
          for i in {1..24}; do
            sleep 5
            echo "Content verification attempt $i/24..."

            PAGE_CONTENT=$(curl -s "$PREVIEW_URL")
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$PREVIEW_URL")

            if [ "$HTTP_STATUS" = "200" ] && echo "$PAGE_CONTENT" | grep -q "wafer.space"; then
              echo "✅ Deployment verified successfully"
              echo "deployment_status=success" >> $GITHUB_OUTPUT
              echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
              exit 0
            fi
          done

          echo "⚠️  Verification timeout - deployment may still be propagating"
          echo "deployment_status=partial" >> $GITHUB_OUTPUT
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "error_message=Content verification timeout" >> $GITHUB_OUTPUT

      - name: Create GitHub deployment
        if: steps.verify-deployment.outputs.deployment_status == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr.outputs.number }};
            const sha = '${{ steps.pr.outputs.sha }}';
            const previewUrl = '${{ steps.verify-deployment.outputs.preview_url }}';

            try {
              const { data: deployment } = await github.rest.repos.createDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: sha,
                environment: `pr-preview-${prNumber}`,
                transient_environment: true,
                production_environment: false,
                required_contexts: [],
                description: `PR #${prNumber} preview`,
                auto_merge: false
              });

              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id,
                state: 'success',
                environment_url: previewUrl,
                description: 'Preview deployment successful'
              });

              console.log(`Created deployment ${deployment.id} for PR #${prNumber}`);
            } catch (error) {
              console.error('Failed to create deployment:', error.message);
              // Don't fail the workflow if deployment creation fails
            }

      - name: Comment on PR with preview URL
        if: steps.verify-deployment.outputs.deployment_status == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr.outputs.number }};
            const previewUrl = '${{ steps.verify-deployment.outputs.preview_url }}';
            const commitSha = '${{ steps.pr.outputs.sha }}'.substring(0, 7);
            const isFork = ${{ steps.pr.outputs.is_fork }};
            const gemfileModified = '${{ steps.gemfile-check.outputs.gemfile_modified }}' === 'true';

            const forkBadge = isFork ? '🌍 **External Contributor** (fork PR)' : '🏠 Internal PR';

            // Add Gemfile security notice for fork PRs with dependency changes
            let securityNotice = '';
            if (isFork && gemfileModified) {
              securityNotice = `\n\n> **🔒 Security Notice:** This PR includes changes to \`Gemfile\` or \`Gemfile.lock\`. For security, the preview was built using the trusted dependencies from the \`main\` branch. If you need to update dependencies, please work with a maintainer to submit those changes separately from an internal branch.\n`;
            }

            const commentBody = `## ✅ Preview Deployment Ready!

${forkBadge}

| Preview URL | Commit |
|-------------|--------|
| [View Preview](${previewUrl}) | \`${commitSha}\` |

**🎉 Your preview has been deployed successfully!**

The preview site is available at: ${previewUrl}${securityNotice}

---
<sub>⚡ Deployed via workflow_run (two-stage deployment) • Preview will be removed when PR is closed</sub>`;

            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Preview Deployment')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
              console.log(`Updated comment ${botComment.id} on PR #${prNumber}`);
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
              console.log(`Created new comment on PR #${prNumber}`);
            }

      - name: Comment on PR if deployment failed
        if: steps.verify-deployment.outputs.deployment_status == 'failed'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr.outputs.number }};
            const errorMessage = '${{ steps.verify-deployment.outputs.error_message }}';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `## ❌ Preview Deployment Failed\n\n**Error:** ${errorMessage}\n\nPlease check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`
            });
