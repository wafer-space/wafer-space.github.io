# Preview Site Verification Workflow
# This workflow performs comprehensive verification of PR preview deployments
# Including link checking, asset validation, and site functionality tests

name: Preview Site Verification

on:
  # Trigger after preview deployment completes
  workflow_run:
    workflows: ["PR Preview Deploy"]
    types: [completed]

  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to verify'
        required: true
        default: '3'
      preview_url:
        description: 'Preview URL to verify'
        required: true
        default: 'https://preview.wafer.space/pr-3/'

permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  verify-preview:
    # Only run if deployment succeeded and there's a PR associated
    if: >
      (github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch') &&
      (github.event.workflow_run.pull_requests[0].number != null || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get PR information
        id: pr-info
        uses: actions/github-script@v7
        with:
          script: |
            // Handle manual workflow dispatch
            if (context.eventName === 'workflow_dispatch') {
              const prNumber = '${{ github.event.inputs.pr_number }}';
              const previewUrl = '${{ github.event.inputs.preview_url }}';

              console.log(`Manual trigger - PR Number: ${prNumber}`);
              console.log(`Manual trigger - Preview URL: ${previewUrl}`);

              core.setOutput('pr_number', prNumber);
              core.setOutput('preview_url', previewUrl);
              core.setOutput('pr_title', 'Manual Verification');
              core.setOutput('head_sha', context.sha);

              return;
            }

            // Handle workflow_run trigger - get PR info from event
            const prNumber = context.payload.workflow_run.pull_requests[0].number;
            const previewUrl = `https://preview.wafer.space/pr-${prNumber}/`;

            console.log(`Workflow run trigger - PR Number: ${prNumber}`);
            console.log(`Preview URL: ${previewUrl}`);

            // Fetch current PR data from GitHub API
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const currentHeadSha = pullRequest.head.sha;
            const prTitle = pullRequest.title;

            console.log(`PR Title: ${prTitle}`);
            console.log(`Current HEAD SHA: ${currentHeadSha}`);
            console.log(`✅ Proceeding with verification`);

            // Set outputs for subsequent steps
            core.setOutput('pr_number', prNumber);
            core.setOutput('preview_url', previewUrl);
            core.setOutput('pr_title', prTitle);
            core.setOutput('head_sha', currentHeadSha);
      
      - name: Wait for preview deployment to complete
        if: steps.pr-info.outputs.pr_number
        run: |
          PREVIEW_URL="${{ steps.pr-info.outputs.preview_url }}"
          EXPECTED_COMMIT="${{ steps.pr-info.outputs.head_sha }}"
          echo "Waiting for preview deployment with commit $EXPECTED_COMMIT at: $PREVIEW_URL"
          
          # Wait up to 10 minutes for the deployment to complete with the correct commit
          for i in {1..120}; do
            echo "Attempt $i/120: Checking preview site availability..."
            
            if curl -s --fail --head "$PREVIEW_URL" > /dev/null; then
              echo "✅ Preview site is responding"
              
              # Check for actual content and correct commit hash
              PAGE_CONTENT=$(curl -s "$PREVIEW_URL")
              if echo "$PAGE_CONTENT" | grep -q "wafer.space"; then
                # Extract git commit hash from HTML comment or meta tag
                COMMIT_COMMENT=$(echo "$PAGE_CONTENT" | grep -oE '<!-- Generated from git commit: [a-f0-9]{40}' | grep -oE '[a-f0-9]{40}' || echo "")
                COMMIT_META=$(echo "$PAGE_CONTENT" | grep -oE '<meta name="git-commit" content="[a-f0-9]{40}"' | grep -oE 'content="[a-f0-9]{40}"' | grep -oE '[a-f0-9]{40}' || echo "")
                
                FOUND_COMMIT="${COMMIT_COMMENT:-$COMMIT_META}"
                
                if [ "$FOUND_COMMIT" = "$EXPECTED_COMMIT" ]; then
                  echo "✅ Preview site has correct commit: $FOUND_COMMIT"
                  echo "✅ Preview site is ready for verification"
                  break
                elif [ -n "$FOUND_COMMIT" ]; then
                  echo "⚠️  Preview site has different commit: $FOUND_COMMIT (expected: $EXPECTED_COMMIT)"
                  echo "⚠️  Waiting for correct deployment..."
                else
                  echo "⚠️  Preview site content ready but commit hash not found"
                fi
              else
                echo "⚠️  Preview site responding but content not yet ready"
              fi
            else
              echo "❌ Preview site not yet responding (may still be deploying)"
            fi
            
            if [ $i -eq 120 ]; then
              echo "ERROR: Preview site not ready with correct commit after 10 minutes"
              echo "Expected commit: $EXPECTED_COMMIT"
              if [ -n "$FOUND_COMMIT" ]; then
                echo "Found commit: $FOUND_COMMIT"
              fi
              echo "This may indicate a deployment failure or very slow deployment"
              exit 1
            fi
            
            sleep 5
          done
          
          echo "Preview site is ready for comprehensive verification"
      
      - name: Install verification tools
        if: steps.pr-info.outputs.pr_number
        run: |
          # Install system tools
          sudo apt-get update
          sudo apt-get install -y lynx html-xml-utils python3-pip jq bc
          
          # Install muffet - comprehensive link and asset checker
          wget -qO- https://github.com/raviqqe/muffet/releases/latest/download/muffet_linux_amd64.tar.gz | tar -xzf - -C /tmp
          sudo mv /tmp/muffet /usr/local/bin/
          
          # Verify installation
          muffet --version
      
      - name: Perform comprehensive site verification
        if: steps.pr-info.outputs.pr_number
        id: verification
        run: |
          PREVIEW_URL="${{ steps.pr-info.outputs.preview_url }}"
          PR_NUMBER="${{ steps.pr-info.outputs.pr_number }}"
          
          echo "Starting comprehensive verification of: $PREVIEW_URL"
          
          # Create verification report
          REPORT_FILE="verification-report.md"
          echo "# Preview Site Verification Report" > $REPORT_FILE
          echo "**PR:** #$PR_NUMBER" >> $REPORT_FILE
          echo "**URL:** $PREVIEW_URL" >> $REPORT_FILE
          echo "**Timestamp:** $(date -u)" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          
          # Track verification status
          VERIFICATION_PASSED=true
          
          # 1. Basic connectivity test
          echo "## 1. Basic Connectivity ✅" >> $REPORT_FILE
          if curl -s --fail --head "$PREVIEW_URL" > /dev/null; then
            echo "- ✅ Site is accessible" >> $REPORT_FILE
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$PREVIEW_URL")
            echo "- ✅ HTTP Status: $HTTP_STATUS" >> $REPORT_FILE
          else
            echo "- ❌ Site is not accessible" >> $REPORT_FILE
            VERIFICATION_PASSED=false
          fi
          echo "" >> $REPORT_FILE
          
          # 2. Content verification
          echo "## 2. Content Verification" >> $REPORT_FILE
          CONTENT=$(curl -s "$PREVIEW_URL")
          
          if echo "$CONTENT" | grep -q "wafer.space"; then
            echo "- ✅ Site contains expected content" >> $REPORT_FILE
          else
            echo "- ❌ Site missing expected content" >> $REPORT_FILE
            VERIFICATION_PASSED=false
          fi
          
          if echo "$CONTENT" | grep -q "Budget silicon manufacturing"; then
            echo "- ✅ Tagline present" >> $REPORT_FILE
          else
            echo "- ❌ Tagline missing" >> $REPORT_FILE
            VERIFICATION_PASSED=false
          fi
          
          # Check for baseurl configuration (flexible check for different implementations)
          if echo "$CONTENT" | grep -q "window.siteBaseurl = '/pr-$PR_NUMBER'"; then
            echo "- ✅ JavaScript baseurl configuration found" >> $REPORT_FILE
          elif echo "$CONTENT" | grep -qE "(src|href)=\"/pr-$PR_NUMBER/"; then
            echo "- ✅ Assets use correct PR baseurl paths" >> $REPORT_FILE
          else
            echo "- ⚠️  Baseurl configuration not detected (checking asset accessibility)" >> $REPORT_FILE
          fi
          echo "" >> $REPORT_FILE
          
          # 3. Comprehensive Multi-Page Asset Verification
          echo "## 3. Multi-Page Asset Verification" >> $REPORT_FILE
          ASSETS_FAILED=0
          ASSETS_TOTAL=0

          # Extract all internal pages from homepage
          echo "Discovering all pages in the site..." >> $REPORT_FILE
          DISCOVERED_PAGES=$(echo "$CONTENT" | grep -oE 'href="[^"#]*\.html"' | grep -oE '"[^"]*"' | tr -d '"' | grep -v "^http" | sort -u)

          # Add homepage (empty string) and all discovered pages
          ALL_PAGES=$(echo -e "\n$DISCOVERED_PAGES")

          # Debug: Log discovered pages
          echo "Found pages: $(echo "$DISCOVERED_PAGES" | wc -l) discovered + homepage" >> $REPORT_FILE

          # Test critical predefined assets from homepage
          echo "Testing critical assets..." >> $REPORT_FILE
          CRITICAL_ASSETS=(
            "favicon.png"
            "assets/css/style.css"
            "assets/js/jquery.min.js"
            "assets/images/logo-light.webp"
          )

          for asset in "${CRITICAL_ASSETS[@]}"; do
            ASSET_URL="$PREVIEW_URL$asset"
            ASSETS_TOTAL=$((ASSETS_TOTAL + 1))
            if curl -s --fail --head "$ASSET_URL" > /dev/null; then
              echo "- ✅ $asset" >> $REPORT_FILE
            else
              echo "- ❌ $asset (HTTP $(curl -s -o /dev/null -w "%{http_code}" "$ASSET_URL"))" >> $REPORT_FILE
              ASSETS_FAILED=$((ASSETS_FAILED + 1))
            fi
          done

          # Check assets on all discovered pages
          echo "Checking assets across all pages..." >> $REPORT_FILE
          PAGE_COUNT=0
          while IFS= read -r page_path; do
            PAGE_COUNT=$((PAGE_COUNT + 1))
            if [ -z "$page_path" ]; then
              PAGE_URL="$PREVIEW_URL"
              PAGE_NAME="homepage"
              PAGE_CONTENT="$CONTENT"
              echo "Processing page $PAGE_COUNT: $PAGE_NAME" >> $REPORT_FILE
            else
              # Handle both relative and absolute paths
              if [[ "$page_path" == /* ]]; then
                # For absolute paths like /pr-46/about.html, use them directly with the domain
                PAGE_URL="https://preview.wafer.space$page_path"
              else
                # For relative paths like how.html, append to PREVIEW_URL
                PAGE_URL="$PREVIEW_URL$page_path"
              fi
              PAGE_NAME="$(basename "$page_path")"
              echo "Processing page $PAGE_COUNT: $PAGE_NAME ($page_path) -> $PAGE_URL" >> $REPORT_FILE
              PAGE_CONTENT=$(curl -s "$PAGE_URL" 2>/dev/null || echo "")
            fi

            if [ -n "$PAGE_CONTENT" ]; then
              # Extract assets from this page
              CSS_ASSETS=$(echo "$PAGE_CONTENT" | grep -oE 'href="[^"]*\.css"' | grep -oE '"[^"]*"' | tr -d '"')
              JS_ASSETS=$(echo "$PAGE_CONTENT" | grep -oE 'src="[^"]*\.js"' | grep -oE '"[^"]*"' | tr -d '"')
              IMAGE_ASSETS=$(echo "$PAGE_CONTENT" | grep -oE '(src|href)="[^"]*\.(png|jpg|jpeg|webp|ico)"' | grep -oE '"[^"]*"' | tr -d '"')
              DATA_IMAGE_ASSETS=$(echo "$PAGE_CONTENT" | grep -oE 'data-[^=]*="[^"]*"' | grep -E '\.(png|jpg|jpeg|webp|ico)' | grep -oE '"[^"]*"' | tr -d '"' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

              ALL_PAGE_ASSETS="$CSS_ASSETS"$'\n'"$JS_ASSETS"$'\n'"$IMAGE_ASSETS"$'\n'"$DATA_IMAGE_ASSETS"

              # Process assets found on this page
              while IFS= read -r asset_path; do
                if [ -n "$asset_path" ]; then
                  # Handle relative vs absolute paths
                  if [[ "$asset_path" == /* ]]; then
                    FULL_ASSET_URL="https://preview.wafer.space$asset_path"
                  else
                    FULL_ASSET_URL="$PREVIEW_URL$asset_path"
                  fi

                  ASSETS_TOTAL=$((ASSETS_TOTAL + 1))
                  HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$FULL_ASSET_URL")
                  if [ "$HTTP_CODE" = "200" ]; then
                    echo "- ✅ $(basename "$asset_path") ($PAGE_NAME)" >> $REPORT_FILE
                  else
                    echo "- ❌ $(basename "$asset_path") (HTTP $HTTP_CODE) on $PAGE_NAME - $asset_path" >> $REPORT_FILE
                    ASSETS_FAILED=$((ASSETS_FAILED + 1))
                  fi
                fi
              done <<< "$ALL_PAGE_ASSETS"
            else
              echo "- ⚠️  Could not fetch $PAGE_NAME" >> $REPORT_FILE
            fi
          done <<< "$ALL_PAGES"

          echo "Checked $PAGE_COUNT pages total." >> $REPORT_FILE
          
          echo "**Asset Summary:** $ASSETS_FAILED/$ASSETS_TOTAL failed" >> $REPORT_FILE
          
          if [ $ASSETS_FAILED -gt 0 ]; then
            echo "- ❌ $ASSETS_FAILED assets failed to load" >> $REPORT_FILE
            VERIFICATION_PASSED=false
          else
            echo "- ✅ All assets loaded successfully" >> $REPORT_FILE
          fi
          echo "" >> $REPORT_FILE
          
          # 4. Comprehensive Link and Asset Verification with muffet
          echo "## 4. Link and Asset Verification (muffet)" >> $REPORT_FILE
          echo "Running comprehensive muffet validation..." >> $REPORT_FILE
          
          # Run muffet with proper configuration for thorough checking
          # Use realistic browser headers to avoid bot detection
          if muffet \
            --timeout=30 \
            --max-connections=10 \
            --max-connections-per-host=5 \
            --buffer-size=16384 \
            --exclude=".*mailto:.*" \
            --exclude=".*linkedin\.com.*" \
            --exclude=".*hawaii\.edu.*" \
            --header="User-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36" \
            --header="Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7" \
            --header="Accept-Language:en-US,en;q=0.9" \
            --header="Accept-Encoding:gzip, deflate, br" \
            --header="Cache-Control:no-cache" \
            --header="Pragma:no-cache" \
            --header="Sec-Ch-Ua:\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"" \
            --header="Sec-Ch-Ua-Mobile:?0" \
            --header="Sec-Ch-Ua-Platform:\"Windows\"" \
            --header="Sec-Fetch-Dest:document" \
            --header="Sec-Fetch-Mode:navigate" \
            --header="Sec-Fetch-Site:none" \
            --header="Sec-Fetch-User:?1" \
            --header="Upgrade-Insecure-Requests:1" \
            "$PREVIEW_URL" > muffet-report.txt 2>&1; then
            echo "- ✅ All links and assets are valid (muffet)" >> $REPORT_FILE
          else
            echo "- ❌ muffet found broken links or assets:" >> $REPORT_FILE
            echo "\`\`\`" >> $REPORT_FILE
            # Show muffet output with details about broken links/assets
            cat muffet-report.txt | head -30 >> $REPORT_FILE 2>/dev/null || echo "No detailed report available" >> $REPORT_FILE
            echo "\`\`\`" >> $REPORT_FILE
            
            # Count different types of failures for summary
            BROKEN_LINKS=$(grep -c "broken link" muffet-report.txt 2>/dev/null || echo "0")
            TIMEOUTS=$(grep -c "timeout" muffet-report.txt 2>/dev/null || echo "0") 
            HTTP_ERRORS=$(grep -c "HTTP" muffet-report.txt 2>/dev/null || echo "0")
            
            echo "**Summary:** $BROKEN_LINKS broken links, $TIMEOUTS timeouts, $HTTP_ERRORS HTTP errors" >> $REPORT_FILE
            VERIFICATION_PASSED=false
          fi
          echo "" >> $REPORT_FILE
          
          # 5. Performance check
          echo "## 5. Performance Check" >> $REPORT_FILE
          LOAD_TIME=$(curl -s -w "%{time_total}" -o /dev/null "$PREVIEW_URL")
          echo "- Page load time: ${LOAD_TIME}s" >> $REPORT_FILE
          
          if (( $(echo "$LOAD_TIME < 5.0" | bc -l) )); then
            echo "- ✅ Load time acceptable" >> $REPORT_FILE
          else
            echo "- ⚠️  Load time may be slow" >> $REPORT_FILE
          fi
          echo "" >> $REPORT_FILE
          
          # 6. Mobile responsiveness check
          echo "## 6. Mobile Responsiveness" >> $REPORT_FILE
          MOBILE_CONTENT=$(curl -s -H "User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15" "$PREVIEW_URL")
          
          if echo "$MOBILE_CONTENT" | grep -q "viewport"; then
            echo "- ✅ Viewport meta tag present" >> $REPORT_FILE
          else
            echo "- ❌ Viewport meta tag missing" >> $REPORT_FILE
            VERIFICATION_PASSED=false
          fi
          echo "" >> $REPORT_FILE
          
          # Final summary
          echo "## Summary" >> $REPORT_FILE
          if [ "$VERIFICATION_PASSED" = true ]; then
            echo "✅ **All verification checks passed!**" >> $REPORT_FILE
            echo "verification_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ **Some verification checks failed**" >> $REPORT_FILE
            echo "verification_status=failed" >> $GITHUB_OUTPUT
          fi
          
          # Save report for comment
          echo "report_content<<EOF" >> $GITHUB_OUTPUT
          cat $REPORT_FILE >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Show summary
          echo "Verification completed. Status: $VERIFICATION_PASSED"
          cat $REPORT_FILE
      
      - name: Comment verification results on PR with lifecycle management
        if: steps.pr-info.outputs.pr_number
        uses: actions/github-script@v7
        with:
          script: |
            const commentVerificationResults = require('./.github/scripts/comment-verification-results.js');
            const result = await commentVerificationResults(github, context, core);
            
            const prNumber = context.payload.pull_request?.number || 'unknown';
            console.log(`Posted verification results to PR #${prNumber}`);
            console.log(`Comment ID: ${result.commentId}, Archived: ${result.archivedCount} previous comments`);
        env:
          VERIFICATION_STATUS: ${{ steps.verification.outputs.verification_status }}
          REPORT_CONTENT: ${{ steps.verification.outputs.report_content }}
          GITHUB_RUN_ID: ${{ github.run_id }}
      
      - name: Fail workflow if verification failed
        if: steps.verification.outputs.verification_status == 'failed'
        run: |
          echo "Preview site verification failed!"
          echo "Check the verification report in the PR comment for details."
          exit 1