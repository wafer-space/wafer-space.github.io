# Preview Site Verification Workflow
# This workflow performs comprehensive verification of PR preview deployments
# Including link checking, asset validation, and site functionality tests

name: Preview Site Verification

on:
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to verify'
        required: true
        default: '3'
      preview_url:
        description: 'Preview URL to verify'
        required: true
        default: 'https://preview.wafer.space/pr-3/'

permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  verify-preview:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Get PR information
        id: pr-info
        uses: actions/github-script@v7
        with:
          script: |
            // Handle manual workflow dispatch
            if (context.eventName === 'workflow_dispatch') {
              const prNumber = '${{ github.event.inputs.pr_number }}';
              const previewUrl = '${{ github.event.inputs.preview_url }}';
              
              console.log(`Manual trigger - PR Number: ${prNumber}`);
              console.log(`Manual trigger - Preview URL: ${previewUrl}`);
              
              core.setOutput('pr_number', prNumber);
              core.setOutput('preview_url', previewUrl);
              core.setOutput('pr_title', 'Manual Verification');
              core.setOutput('head_sha', context.sha);
              
              return;
            }
            
            // Handle pull_request trigger
            const prNumber = context.payload.pull_request.number;
            const previewUrl = `https://preview.wafer.space/pr-${prNumber}/`;
            const prTitle = context.payload.pull_request.title;
            const headSha = context.payload.pull_request.head.sha;
            
            console.log(`PR Number: ${prNumber}`);
            console.log(`Preview URL: ${previewUrl}`);
            console.log(`PR Title: ${prTitle}`);
            
            // Set outputs for subsequent steps
            core.setOutput('pr_number', prNumber);
            core.setOutput('preview_url', previewUrl);
            core.setOutput('pr_title', prTitle);
            core.setOutput('head_sha', headSha);
      
      - name: Wait for preview deployment to complete
        if: steps.pr-info.outputs.pr_number
        run: |
          PREVIEW_URL="${{ steps.pr-info.outputs.preview_url }}"
          echo "Waiting for preview deployment and site to be ready at: $PREVIEW_URL"
          
          # Wait up to 5 minutes for the deployment to complete and site to be ready
          for i in {1..60}; do
            echo "Attempt $i/60: Checking preview site availability..."
            
            if curl -s --fail --head "$PREVIEW_URL" > /dev/null; then
              echo "✅ Preview site is responding"
              
              # Additional check for actual content to ensure it's not a stale cache
              if curl -s "$PREVIEW_URL" | grep -q "wafer.space"; then
                # Check if the deployment has the current commit by looking for updated content
                CONTENT=$(curl -s "$PREVIEW_URL")
                echo "✅ Preview site content verified - ready for verification"
                break
              else
                echo "⚠️  Preview site responding but content not yet ready"
              fi
            else
              echo "❌ Preview site not yet responding (may still be deploying)"
            fi
            
            if [ $i -eq 60 ]; then
              echo "ERROR: Preview site not ready after 5 minutes"
              echo "This may indicate a deployment failure or very slow deployment"
              exit 1
            fi
            
            sleep 5
          done
          
          echo "Preview site is ready for comprehensive verification"
      
      - name: Install verification tools
        if: steps.pr-info.outputs.pr_number
        run: |
          # Install system tools
          sudo apt-get update
          sudo apt-get install -y lynx html-xml-utils python3-pip jq bc
          
          # Install muffet - comprehensive link and asset checker
          wget -qO- https://github.com/raviqqe/muffet/releases/latest/download/muffet_linux_amd64.tar.gz | tar -xzf - -C /tmp
          sudo mv /tmp/muffet /usr/local/bin/
          
          # Verify installation
          muffet --version
      
      - name: Perform comprehensive site verification
        if: steps.pr-info.outputs.pr_number
        id: verification
        run: |
          PREVIEW_URL="${{ steps.pr-info.outputs.preview_url }}"
          PR_NUMBER="${{ steps.pr-info.outputs.pr_number }}"
          
          echo "Starting comprehensive verification of: $PREVIEW_URL"
          
          # Create verification report
          REPORT_FILE="verification-report.md"
          echo "# Preview Site Verification Report" > $REPORT_FILE
          echo "**PR:** #$PR_NUMBER" >> $REPORT_FILE
          echo "**URL:** $PREVIEW_URL" >> $REPORT_FILE
          echo "**Timestamp:** $(date -u)" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          
          # Track verification status
          VERIFICATION_PASSED=true
          
          # 1. Basic connectivity test
          echo "## 1. Basic Connectivity ✅" >> $REPORT_FILE
          if curl -s --fail --head "$PREVIEW_URL" > /dev/null; then
            echo "- ✅ Site is accessible" >> $REPORT_FILE
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$PREVIEW_URL")
            echo "- ✅ HTTP Status: $HTTP_STATUS" >> $REPORT_FILE
          else
            echo "- ❌ Site is not accessible" >> $REPORT_FILE
            VERIFICATION_PASSED=false
          fi
          echo "" >> $REPORT_FILE
          
          # 2. Content verification
          echo "## 2. Content Verification" >> $REPORT_FILE
          CONTENT=$(curl -s "$PREVIEW_URL")
          
          if echo "$CONTENT" | grep -q "wafer.space"; then
            echo "- ✅ Site contains expected content" >> $REPORT_FILE
          else
            echo "- ❌ Site missing expected content" >> $REPORT_FILE
            VERIFICATION_PASSED=false
          fi
          
          if echo "$CONTENT" | grep -q "Budget silicon manufacturing"; then
            echo "- ✅ Tagline present" >> $REPORT_FILE
          else
            echo "- ❌ Tagline missing" >> $REPORT_FILE
            VERIFICATION_PASSED=false
          fi
          
          # Check for baseurl configuration (flexible check for different implementations)
          if echo "$CONTENT" | grep -q "window.siteBaseurl = '/pr-$PR_NUMBER'"; then
            echo "- ✅ JavaScript baseurl configuration found" >> $REPORT_FILE
          elif echo "$CONTENT" | grep -qE "(src|href)=\"/pr-$PR_NUMBER/"; then
            echo "- ✅ Assets use correct PR baseurl paths" >> $REPORT_FILE
          else
            echo "- ⚠️  Baseurl configuration not detected (checking asset accessibility)" >> $REPORT_FILE
          fi
          echo "" >> $REPORT_FILE
          
          # 3. Asset verification - extract actual asset URLs from HTML
          echo "## 3. Asset Verification" >> $REPORT_FILE
          ASSETS_FAILED=0
          ASSETS_TOTAL=0
          
          # Extract CSS and JS assets from HTML
          echo "Extracting asset URLs from HTML..." >> $REPORT_FILE
          
          # Test critical predefined assets
          CRITICAL_ASSETS=(
            "favicon.png"
            "assets/css/style.css"
            "assets/js/jquery.min.js"
            "assets/images/logo-light.webp"
          )
          
          for asset in "${CRITICAL_ASSETS[@]}"; do
            ASSET_URL="$PREVIEW_URL$asset"
            ASSETS_TOTAL=$((ASSETS_TOTAL + 1))
            if curl -s --fail --head "$ASSET_URL" > /dev/null; then
              echo "- ✅ $asset" >> $REPORT_FILE
            else
              echo "- ❌ $asset (HTTP $(curl -s -o /dev/null -w "%{http_code}" "$ASSET_URL"))" >> $REPORT_FILE
              ASSETS_FAILED=$((ASSETS_FAILED + 1))
            fi
          done
          
          # Extract and test actual CSS/JS assets referenced in HTML
          echo "Checking HTML-referenced assets..." >> $REPORT_FILE
          CSS_ASSETS=$(echo "$CONTENT" | grep -oE 'href="[^"]*\.css"' | grep -oE '"[^"]*"' | tr -d '"')
          JS_ASSETS=$(echo "$CONTENT" | grep -oE 'src="[^"]*\.js"' | grep -oE '"[^"]*"' | tr -d '"')
          IMAGE_ASSETS=$(echo "$CONTENT" | grep -oE '(src|href)="[^"]*\.(png|jpg|jpeg|webp|ico)"' | grep -oE '"[^"]*"' | tr -d '"' | head -5)
          
          ALL_HTML_ASSETS="$CSS_ASSETS"$'\n'"$JS_ASSETS"$'\n'"$IMAGE_ASSETS"
          
          while IFS= read -r asset_path; do
            if [ -n "$asset_path" ]; then
              # Handle relative vs absolute paths
              if [[ "$asset_path" == /* ]]; then
                FULL_ASSET_URL="https://preview.wafer.space$asset_path"
              else
                FULL_ASSET_URL="$PREVIEW_URL$asset_path"
              fi
              
              ASSETS_TOTAL=$((ASSETS_TOTAL + 1))
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$FULL_ASSET_URL")
              if [ "$HTTP_CODE" = "200" ]; then
                echo "- ✅ $(basename "$asset_path") (HTML-referenced)" >> $REPORT_FILE
              else
                echo "- ❌ $(basename "$asset_path") (HTTP $HTTP_CODE) - $asset_path" >> $REPORT_FILE
                ASSETS_FAILED=$((ASSETS_FAILED + 1))
              fi
            fi
          done <<< "$ALL_HTML_ASSETS"
          
          echo "**Asset Summary:** $ASSETS_FAILED/$ASSETS_TOTAL failed" >> $REPORT_FILE
          
          if [ $ASSETS_FAILED -gt 0 ]; then
            echo "- ❌ $ASSETS_FAILED assets failed to load" >> $REPORT_FILE
            VERIFICATION_PASSED=false
          else
            echo "- ✅ All assets loaded successfully" >> $REPORT_FILE
          fi
          echo "" >> $REPORT_FILE
          
          # 4. Comprehensive Link and Asset Verification with muffet
          echo "## 4. Link and Asset Verification (muffet)" >> $REPORT_FILE
          echo "Running comprehensive muffet validation..." >> $REPORT_FILE
          
          # Run muffet with proper configuration for thorough checking
          if muffet \
            --timeout=30 \
            --max-connections=10 \
            --max-connections-per-host=5 \
            --exclude=".*mailto:.*" \
            --header="User-Agent:Mozilla/5.0 (compatible; VerificationBot/1.0)" \
            "$PREVIEW_URL" > muffet-report.txt 2>&1; then
            echo "- ✅ All links and assets are valid (muffet)" >> $REPORT_FILE
          else
            echo "- ❌ muffet found broken links or assets:" >> $REPORT_FILE
            echo "\`\`\`" >> $REPORT_FILE
            # Show muffet output with details about broken links/assets
            cat muffet-report.txt | head -30 >> $REPORT_FILE 2>/dev/null || echo "No detailed report available" >> $REPORT_FILE
            echo "\`\`\`" >> $REPORT_FILE
            
            # Count different types of failures for summary
            BROKEN_LINKS=$(grep -c "broken link" muffet-report.txt 2>/dev/null || echo "0")
            TIMEOUTS=$(grep -c "timeout" muffet-report.txt 2>/dev/null || echo "0") 
            HTTP_ERRORS=$(grep -c "HTTP" muffet-report.txt 2>/dev/null || echo "0")
            
            echo "**Summary:** $BROKEN_LINKS broken links, $TIMEOUTS timeouts, $HTTP_ERRORS HTTP errors" >> $REPORT_FILE
            VERIFICATION_PASSED=false
          fi
          echo "" >> $REPORT_FILE
          
          # 5. Performance check
          echo "## 5. Performance Check" >> $REPORT_FILE
          LOAD_TIME=$(curl -s -w "%{time_total}" -o /dev/null "$PREVIEW_URL")
          echo "- Page load time: ${LOAD_TIME}s" >> $REPORT_FILE
          
          if (( $(echo "$LOAD_TIME < 5.0" | bc -l) )); then
            echo "- ✅ Load time acceptable" >> $REPORT_FILE
          else
            echo "- ⚠️  Load time may be slow" >> $REPORT_FILE
          fi
          echo "" >> $REPORT_FILE
          
          # 6. Mobile responsiveness check
          echo "## 6. Mobile Responsiveness" >> $REPORT_FILE
          MOBILE_CONTENT=$(curl -s -H "User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15" "$PREVIEW_URL")
          
          if echo "$MOBILE_CONTENT" | grep -q "viewport"; then
            echo "- ✅ Viewport meta tag present" >> $REPORT_FILE
          else
            echo "- ❌ Viewport meta tag missing" >> $REPORT_FILE
            VERIFICATION_PASSED=false
          fi
          echo "" >> $REPORT_FILE
          
          # Final summary
          echo "## Summary" >> $REPORT_FILE
          if [ "$VERIFICATION_PASSED" = true ]; then
            echo "✅ **All verification checks passed!**" >> $REPORT_FILE
            echo "verification_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ **Some verification checks failed**" >> $REPORT_FILE
            echo "verification_status=failed" >> $GITHUB_OUTPUT
          fi
          
          # Save report for comment
          echo "report_content<<EOF" >> $GITHUB_OUTPUT
          cat $REPORT_FILE >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Show summary
          echo "Verification completed. Status: $VERIFICATION_PASSED"
          cat $REPORT_FILE
      
      - name: Comment verification results on PR with lifecycle management
        if: steps.pr-info.outputs.pr_number
        uses: actions/github-script@v7
        with:
          script: |
            const commentVerificationResults = require('./.github/scripts/comment-verification-results.js');
            const result = await commentVerificationResults(github, context, core);
            
            const prNumber = context.payload.pull_request?.number || 'unknown';
            console.log(`Posted verification results to PR #${prNumber}`);
            console.log(`Comment ID: ${result.commentId}, Archived: ${result.archivedCount} previous comments`);
        env:
          VERIFICATION_STATUS: ${{ steps.verification.outputs.verification_status }}
          REPORT_CONTENT: ${{ steps.verification.outputs.report_content }}
          GITHUB_RUN_ID: ${{ github.run_id }}
      
      - name: Fail workflow if verification failed
        if: steps.verification.outputs.verification_status == 'failed'
        run: |
          echo "Preview site verification failed!"
          echo "Check the verification report in the PR comment for details."
          exit 1